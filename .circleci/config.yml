defaults: &defaults
  docker:
    - image: continuumio/miniconda3
  environment:
    DATABASE_DIR: databases


version: 2

jobs:
  build:
    <<: *defaults
    resource_class: small
    environment:
      N_THREADS: 1
      MEM: 2
      WORKING_DIR: .test/Dryrun
    steps:
      - checkout
      - run: pwd
      - run:
          name: Setup conda
          command: |
           conda config --add channels bioconda
           conda config --add channels conda-forge
           conda config --set always_yes true
           conda install -y mamba
      - restore_cache:
          key: atlasenv-d-{{ checksum "atlasenv.yml" }}
      - run:
          name: install dependencies
          command:  |
              if [ -d "./atlasenv" ]; then
                echo "atlasenv exist already";
                source activate ./atlasenv
                conda list
              else
                mamba env create -p ./atlasenv --file atlasenv.yml
              fi
      - save_cache:
          key: atlasenv-d-{{ checksum "atlasenv.yml" }}
          paths:
            - "./atlasenv"
      - run:
          name: Install atlas
          command: |
              source activate ./atlasenv
              python setup.py install
              conda list
              atlas --help
              atlas --version
      - run:
          name: short test
          command: |
              source activate ./atlasenv
              atlas --help
              atlas --version
      - run:
          name: Dryrun
          command: |
              source activate ./atlasenv
              .test/dryrun.sh

      - persist_to_workspace:
          root: /root/project/
          paths:
            - ./atlasenv
            - .

  getenvs:
    <<: *defaults
    resource_class: small
    steps:
      - attach_workspace:
          at: /root/project/
      - run: tar -cf conda_envs.tar atlas/envs
      - restore_cache:
          keys:
            - conda-environements-{{ checksum "conda_envs.tar"  }}
            - conda-environements-
      - run:
          name: Init
          command: |
              source activate ./atlasenv
              atlas init --db-dir $DATABASE_DIR --threads 1 -w .test/Getenvs .test/reads/empty
      - run:
          name: install environements
          command: |
              source activate ./atlasenv
              atlas run all -w .test/Getenvs --create-envs-only --omit-from build_qc_report build_assembly_report build_bin_report
      - save_cache:
          key: conda-environements-{{ checksum "conda_envs.tar"  }}
          paths:
            - databases
      # - run:
      #     name: download checkm data
      #     command: |
      #         source activate ./atlasenv
      #         atlas run None -w .test/Getenvs logs/checkm_init.txt

      - persist_to_workspace:
          root: /root/project/
          paths:
            - databases


  get_example_data:
    <<: *defaults
    environment:
    resource_class: small
    steps:
      - attach_workspace:
          at: /root/project/

      - run: git clone https://github.com/metagenome-atlas/example_data.git
      - persist_to_workspace:
          root: /root/project
          paths:
            - example_data

  assembly_and_genecatalog:
    <<: *defaults
    environment:
      N_THREADS: 2
      MEM: 3
    resource_class: medium
    steps:
      - attach_workspace:
          at: /root/project/
      - run: tar -cf conda_envs.tar atlas/envs
      - restore_cache:
          keys:
            - conda-environements-{{ checksum "conda_envs.tar"  }}
            - conda-environements-
      - run:
          name: test assembly
          command: |
              source activate ./atlasenv
              .test/test_assembly.sh --resources mem=$MEM java_mem=$MEM --jobs=$N_THREADS --restart-times=2 --omit-from build_qc_report build_assembly_report
      # - store_test_results:
      #     path: .test/Test_assembly/reports
      # - store_artifacts:
      #     path: .test/Test_assembly/reports
      #     destination: assembly_results

      - run:
          name: run genecatalog
          command: |
              source activate ./atlasenv
              WD='.test/Test_assembly'
              atlas run None "Genecatalog/clustering/orf2gene.tsv.gz" -w $WD --resources mem=$MEM java_mem=$MEM --jobs=$N_THREADS --restart-times=2
  binning:
    <<: *defaults
    environment:
      N_THREADS: 2
      MEM: 4
    resource_class: medium
    steps:
      - attach_workspace:
          at: /root/project/
      - run: tar -cf conda_envs.tar atlas/envs
      - restore_cache:
          keys:
            - conda-environements-{{ checksum "conda_envs.tar"  }}
            - conda-environements-
      - run:
          name: test binning
          command: |
              source activate ./atlasenv
              .test/test_binning.sh --resources mem=$MEM java_mem=$MEM --jobs=$N_THREADS --restart-times=2 --omit-from get_bins
      - store_test_results:
          path: example_data/binning/reports
      - store_artifacts:
          path: example_data/binning/reports
          destination: binning_results

  #
  #
  # build-docker:
  #   environment:
  #     IMAGE_NAME: metagenomeatlas/atlas
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #   steps:
  #     - checkout
  #     - setup_remote_docker
  #     - run:
  #         name: Build Docker image
  #         command: docker build -t $IMAGE_NAME:latest .
  # publish-latest:
  #   environment:
  #     IMAGE_NAME: metagenomeatlas/atlas
  #   docker:
  #     - image: circleci/buildpack-deps:stretch
  #   steps:
  #     - setup_remote_docker
  #     - run:
  #         name: Publish Docker Image to Docker Hub
  #         command: |
  #           echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
  #           docker push $IMAGE_NAME:latest


workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - get_example_data
      - getenvs:
          requires:
            - build
      - assembly_and_genecatalog:
          requires:
            - build
            - get_example_data
      - binning:
          requires:
            - build
            - get_example_data
      # - build-docker:
      #     requires:
      #       - build
      #       - getenvs
      #       - assembly_and_genecatalog
      #     filters:
      #       branches:
      #         only: master
      # - publish-latest:
      #     requires:
      #       - build-docker
      #     filters:
      #       branches:
      #         only: master
